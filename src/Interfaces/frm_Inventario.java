/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import Classes.Ingrediente;
import Classes.Inventario;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;

/**
 *
 * @author aaroncabrera396
 */
public class frm_Inventario extends javax.swing.JFrame {
    
    private Inventario inventario = new Inventario(); // Instancia del inventario
    private DefaultListModel<String> listaIngredientesModel; // Modelo de la lista para mostrar el inventario
    private JList<String> ingredientesList; // Lista visual de ingredientes
    /**
     * Creates new form frm_Inventario
     */
    public frm_Inventario() {
        /*initComponents();*/
        // Configuración del Frame
        setTitle("Gestión de Inventario");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Panel principal
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        
        // Modelo de la lista que mostrará los ingredientes
        listaIngredientesModel = new DefaultListModel<>();
        ingredientesList = new JList<>(listaIngredientesModel);

        // Panel para la lista de ingredientes
        JScrollPane scrollPane = new JScrollPane(ingredientesList);
        panel.add(scrollPane, BorderLayout.CENTER);

        // Panel inferior con campos y botones
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(3, 2, 10, 10));

        // Etiquetas y campos de texto
        JLabel nombreLabel = new JLabel("Nombre Ingrediente:");
        JTextField nombreTextField = new JTextField();
        JLabel cantidadLabel = new JLabel("Cantidad:");
        JTextField cantidadTextField = new JTextField();

        // Botones
        JButton agregarButton = new JButton("Agregar");
        JButton actualizarButton = new JButton("Actualizar");

        // Agregar componentes al panel de entrada
        inputPanel.add(nombreLabel);
        inputPanel.add(nombreTextField);
        inputPanel.add(cantidadLabel);
        inputPanel.add(cantidadTextField);
        inputPanel.add(agregarButton);
        inputPanel.add(actualizarButton);

        panel.add(inputPanel, BorderLayout.SOUTH);
        
        // Agregar eventos a los botones
        agregarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener los valores de los campos de texto
                String nombre = nombreTextField.getText();
                double cantidad = Double.parseDouble(cantidadTextField.getText());

                // Crear un nuevo ingrediente y agregarlo al inventario
                Ingrediente nuevoIngrediente = new Ingrediente(nombre, cantidad, "unidades");
                inventario.agregarIngrediente(nuevoIngrediente, cantidad);

                // Actualizar la lista de ingredientes en la interfaz
                actualizarVistaInventario();
            }
        });
        
        actualizarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener los valores de los campos de texto
                String nombre = nombreTextField.getText();
                double cantidad = Double.parseDouble(cantidadTextField.getText());

                // Buscar el ingrediente y actualizar la cantidad
                Ingrediente ingrediente = buscarIngredientePorNombre(nombre);
                if (ingrediente != null) {
                    inventario.actualizarCantidadIngrediente(ingrediente, cantidad);
                    actualizarVistaInventario();
                } else {
                    mostrarMensajeError("El ingrediente no se encuentra en el inventario.");
                }
            }
        });

        // Configurar y mostrar la ventana
        add(panel);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Método para buscar un ingrediente por nombre
    private Ingrediente buscarIngredientePorNombre(String nombre) {
        for (Ingrediente ingrediente : inventario.getIngredientesDisponibles().keySet()) {
            if (ingrediente.getNombre().equalsIgnoreCase(nombre)) {
                return ingrediente;
            }
        }
        return null;
    }

    // Método para mostrar un mensaje de error
    private void mostrarMensajeError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    // Método para actualizar la lista de ingredientes visualmente
    private void actualizarVistaInventario() {
        listaIngredientesModel.clear();
        for (Map.Entry<Ingrediente, Double> entry : inventario.getIngredientesDisponibles().entrySet()) {
            Ingrediente ingrediente = entry.getKey();
            double cantidad = entry.getValue();
            listaIngredientesModel.addElement(ingrediente.getNombre() + ": " + cantidad + " " + ingrediente.getUnidadMedida());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_Inventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_Inventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_Inventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_Inventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_Inventario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
